P5D.App.send = function (url, type, data, success, error, cache, errorHttp, headers) {
	const paramsHeaders = headers || {};
	const token = P5D.getContext().getAuthToken();
	if (token) {
		paramsHeaders['as'] = token;
	}
	paramsHeaders['Accept-Language'] = P5D.getContext().getLanguage()
	return $.ajax({
		url: '/api/' + url,
		cache: cache !== undefined ? cache : false,
		type: type.toLowerCase(),
		dataType: 'json',
		processData: false,
		contentType: 'application/json',
		data: JSON.stringify(data || {}),
		headers: paramsHeaders,
		success: function (d) {
			if (d.error > 0) {
				if (error) {
					error(d);
				} else {
					P5D.Dialogs.alert(d.error + ' ' + d.errorMessage + '.');
				}
			} else {
				success && success(d);
			}
		},
		error: function (d) {
			if (errorHttp) {
				errorHttp(d.responseJSON || {error: 500, errorMessage: "Invalid response"})
			}
		}
	});
};

P5D.App.setEditorParam = function (param, value) {
	P5D.editorSettings = P5D.editorSettings || {};
	P5D.editorSettings[param] = value;
	if (P5D.App[param] !== undefined && typeof P5D.App[param] === 'function') {
		P5D.App[param](value);
	}
};

P5D.App.postEditorProject = () => new Promise((resolve, reject) => {
	const editor = P5D.getEditor();
	if (!editor) {
		reject();
	}
	editor.postProject(resolve, true);
});

P5D.App.postEmptyProject = () => {
	const projectDataTemplate = {
		folder: 0,
		name: P5D.getContext().getTranslations().NewProject,
		data: {
			v: 0, className: 'Project',
			items: [{className: 'Floor', name: P5D.getContext().getTranslations().firstFloor, items: []}]
		}
	};
	return new Promise(resolve => {
		P5D.App.send(
			'project', 'post', projectDataTemplate,
			d => resolve(P5D.getContext().uri.editProject(d.hash))
		);
	});
};

P5D.App.setDialogAuthorizationCloseable = function (closeable) {
	const modals = $('#modal-signup, #modal-signin');
	modals.find(".delete").css("visibility", closeable ? 'visible' : 'hidden');
	modals.find(".modal-background").toggleClass('noClose', !closeable);
};

P5D.App.log = function (action, data) {
	P5D.App.send('log', 'post', {
		action: action,
		data: data || ''
	}, function () {
	}, function () {
	});
};

P5D.App.event = function (event) {
	if (!window.gtag) return false;
	window.gtag('event', event);
};

P5D.App.getParam = function (name, s) {
	var s = s || location.href;
	var d = s.split(name + '=')[1];
	if (d) {
		d = decodeURIComponent(d.split('&')[0]);
		d = d.split('#')[0];
	}
	return d || '';
};

P5D.App.getHParam = function (name) {
	var s = location.hash && location.hash.substr(1);
	return P5D.App.getParam(name, s);
};

P5D.App.setUrlParameter = function (url, key, value) {
	var key = encodeURIComponent(key), value = encodeURIComponent(value);
	var baseUrl = url.split('?')[0], newParam = key + '=' + value, params = '?' + newParam;
	
	urlQueryString = url.split('?')[1] === undefined ? '' : ('?' + url.split('?')[1]);
	
	if (urlQueryString) {
		var updateRegex = new RegExp('([\?&])' + key + '[^&]*');
		var removeRegex = new RegExp('([\?&])' + key + '=[^&;]+[&;]?');
		
		if (value === undefined || value === null || value === '') { // Remove param if value is empty
			params = urlQueryString.replace(removeRegex, "$1");
			params = params.replace(/[&;]$/, "");
			
		} else if (urlQueryString.match(updateRegex) !== null) { // If param exists already, update it
			params = urlQueryString.replace(updateRegex, "$1" + newParam);
			
		} else if (urlQueryString == '') { // If there are no query strings
			params = '?' + newParam;
		} else { // Otherwise, add it to end of query string
			params = urlQueryString + '&' + newParam;
		}
	}
	
	return baseUrl + (params === '?' ? '' : params);
}

P5D.App.setExportHook = function (hookName, handler) {
	P5D.Export.Hooks = P5D.Export.Hooks || {};
	if (!Array.isArray(P5D.Export.Hooks[hookName])) {
		P5D.Export.Hooks[hookName] = [];
	}
	P5D.Export.Hooks[hookName].push(handler);
};
