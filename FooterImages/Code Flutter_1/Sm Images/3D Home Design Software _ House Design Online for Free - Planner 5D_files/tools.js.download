
P5D.Tools.tmpl = function (tmpl, data) {
	return P5D.Tools._tmplProcess(document.getElementById('tmpl-' + tmpl) ? document.getElementById('tmpl-' + tmpl).innerHTML.trim() : '', data);
};

P5D.Tools._tmplProcess = function (html, data) {
	return data == undefined ? html : html.replace(/\{([\w\.]*)\}/g, function (str, key) {
		var keys = key.split("."), v = data[keys.shift()];
		for (i = 0, l = keys.length; i < l; i++) v = v[this];
		return (typeof v !== "undefined" && v !== null) ? v : "";
	});
};

P5D.Tools.getString = function (stringId) {
	var a = document.getElementById(stringId);
	if (a) {
		return a.innerHTML;
	}
	return stringId;
};

P5D.Tools.getLangString = function (stringId) {
	return P5D.Tools.getString('lang-' + stringId);
};

P5D.Tools.getCookie = function (name) {
	var value = "; " + document.cookie;
	var parts = value.split("; " + name + "=");
	if (parts.length === 2) return parts.pop().split(";").shift();
};

P5D.Tools.setCookie = function (name, value, days) {
	var expires = "";
	if (days) {
		var date = new Date();
		date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
		expires = "; expires=" + date.toUTCString();
	}
	document.cookie = name + "=" + (value || "") + expires + "; path=/";
};

P5D.Tools.to10 = function (p) {
	p = parseInt(p);
	if (p < 10) p = '0' + String(p);
	return p;
};

P5D.Tools.toLocalTime = function (d, nodate, notime) {
	if (typeof d == 'string' && d.length > 0) {
		var d = d.replace(/-/g, '/'),
			d = new Date(d);
		d = new Date(d.getTime() - new Date().getTimezoneOffset() * 60000);
		var r = (nodate ? '' : [P5D.Tools.to10(d.getDate()), P5D.Tools.to10(d.getMonth() + 1), P5D.Tools.to10(d.getFullYear())].join('.'));
		r += (notime ? '' : (nodate ? '' : ', ') + [P5D.Tools.to10(d.getHours()), P5D.Tools.to10(d.getMinutes()), P5D.Tools.to10(d.getSeconds())].join(':'));
	}
	return r || d;
};

P5D.iTools = {
	toWidth: function (base64, width, callback) {
		var img = new Image();
		img.onload = function () {
			var imgWidth = img.width,
				imgHeight = img.height;

			if (imgWidth < width) {
				callback({
					error: 'Minimum width: ' + width
				});
				return true;
			}

			var ratio = width / img.width,
				y = Math.round(img.height * ratio),
				dy = 0,
				x = width,
				dx = 0;

			callback({
				data: P5D.iTools._work(img, x, y, dx, dy, imgWidth, imgHeight, ratio, width, y)
			});
		};
		img.src = base64;
	},

	thumb: function (base64, width, height, backgroundColor, callback) {
		var img = new Image();
		img.onload = function () {
			var imgWidth = img.width,
				imgHeight = img.height;

			if (imgWidth < width || imgHeight < height) {
				callback({
					error: 'Minimum size: ' + width + 'x' + height
				});
				return true;
			}

			var ratio = width / img.width,
				y = Math.round(img.height * ratio),
				dy = Math.round((height - y) / 2),
				x = width,
				dx = 0;

			if (y < height) {
				ratio = height / img.height;
				y = height;
				dy = 0;
				x = Math.round(img.width * ratio);
				dx = Math.round((width - x) / 2);
			}

			callback({
				data: P5D.iTools._work(img, x, y, dx, dy, imgWidth, imgHeight, ratio, width, height)
			});
		};
		img.src = base64;
	},

	_work: function (img, x, y, dx, dy, imgWidth, imgHeight, ratio, width, height) {
		var canvas = document.createElement('canvas');
		var canvasContext = canvas.getContext("2d");
		var canvasCopy = document.createElement("canvas");
		var copyContext = canvasCopy.getContext("2d");
		var canvasCopy2 = document.createElement("canvas");
		var copyContext2 = canvasCopy2.getContext("2d");
		canvasCopy.width = imgWidth;
		canvasCopy.height = imgHeight;
		copyContext.drawImage(img, 0, 0);
		canvasCopy2.width = imgWidth;
		canvasCopy2.height = imgHeight;
		copyContext2.drawImage(canvasCopy, 0, 0, canvasCopy.width, canvasCopy.height, 0, 0, canvasCopy2.width, canvasCopy2.height);

		this._resample(canvasCopy2, x, y, true);

		canvas.width = width;
		canvas.height = height;
		canvasContext.drawImage(canvasCopy2, 0, 0, canvasCopy2.width, canvasCopy2.height, dx, dy, x, y);
		return canvas.toDataURL();
	},

	_resample: function (canvas, width, height, resize_canvas) {
		var width_source = canvas.width;
		var height_source = canvas.height;
		width = Math.round(width);
		height = Math.round(height);

		var ratio_w = width_source / width;
		var ratio_h = height_source / height;
		var ratio_w_half = Math.ceil(ratio_w / 2);
		var ratio_h_half = Math.ceil(ratio_h / 2);

		var ctx = canvas.getContext("2d");
		var img = ctx.getImageData(0, 0, width_source, height_source);
		var img2 = ctx.createImageData(width, height);
		var data = img.data;
		var data2 = img2.data;

		for (var j = 0; j < height; j++) {
			for (var i = 0; i < width; i++) {
				var x2 = (i + j * width) * 4;
				var weight = 0;
				var weights = 0;
				var weights_alpha = 0;
				var gx_r = 0;
				var gx_g = 0;
				var gx_b = 0;
				var gx_a = 0;
				var center_y = (j + 0.5) * ratio_h;
				var yy_start = Math.floor(j * ratio_h);
				var yy_stop = Math.ceil((j + 1) * ratio_h);
				for (var yy = yy_start; yy < yy_stop; yy++) {
					var dy = Math.abs(center_y - (yy + 0.5)) / ratio_h_half;
					var center_x = (i + 0.5) * ratio_w;
					var w0 = dy * dy; //pre-calc part of w
					var xx_start = Math.floor(i * ratio_w);
					var xx_stop = Math.ceil((i + 1) * ratio_w);
					for (var xx = xx_start; xx < xx_stop; xx++) {
						var dx = Math.abs(center_x - (xx + 0.5)) / ratio_w_half;
						var w = Math.sqrt(w0 + dx * dx);
						if (w >= 1) {
							//pixel too far
							continue;
						}
						//hermite filter
						weight = 2 * w * w * w - 3 * w * w + 1;
						var pos_x = 4 * (xx + yy * width_source);
						//alpha
						gx_a += weight * data[pos_x + 3];
						weights_alpha += weight;
						//colors
						if (data[pos_x + 3] < 255)
							weight = weight * data[pos_x + 3] / 250;
						gx_r += weight * data[pos_x];
						gx_g += weight * data[pos_x + 1];
						gx_b += weight * data[pos_x + 2];
						weights += weight;
					}
				}
				data2[x2] = gx_r / weights;
				data2[x2 + 1] = gx_g / weights;
				data2[x2 + 2] = gx_b / weights;
				data2[x2 + 3] = gx_a / weights_alpha;
			}
		}
		//clear and resize canvas
		if (resize_canvas === true) {
			canvas.width = width;
			canvas.height = height;
		} else {
			ctx.clearRect(0, 0, width_source, height_source);
		}

		//draw
		ctx.putImageData(img2, 0, 0);
	}
};